package symbols

import (
	"fmt"
	"reflect"
	"sort"
	"testing"

	tu "github.com/benoitkugler/pen2latex/testutils"
)

func generateLine(li line, N int) Shape {
	out := make(Shape, N)
	for i := range out {
		x := fl(i)
		out[i] = Pos{x, li.a*x + li.b}
	}
	return out
}

func printSegments(t *testing.T, out kmResult, name string) {
	for k, line := range out.lines {
		printShape(t, append(out.points, generateLine(line, len(out.points))...), fmt.Sprintf("tmp_%s_fit_%d.png", name, k))
	}
}

func TestSegment(t *testing.T) {
	bracket := Shape{
		{X: 145.0, Y: 5.3}, {X: 146.0, Y: 5.3}, {X: 147.0, Y: 5.3}, {X: 148.0, Y: 4.3}, {X: 150.0, Y: 4.3}, {X: 151.0, Y: 4.3}, {X: 152.0, Y: 4.3}, {X: 153.0, Y: 4.3}, {X: 154.0, Y: 4.3}, {X: 155.0, Y: 4.3}, {X: 156.0, Y: 4.3}, {X: 157.0, Y: 4.3}, {X: 158.0, Y: 4.3}, {X: 159.0, Y: 4.3}, {X: 159.0, Y: 5.3}, {X: 159.0, Y: 6.3}, {X: 159.0, Y: 7.3}, {X: 159.0, Y: 8.3}, {X: 160.0, Y: 10.3}, {X: 160.0, Y: 12.3}, {X: 160.0, Y: 14.3}, {X: 160.0, Y: 16.3}, {X: 160.0, Y: 17.3}, {X: 160.0, Y: 19.3}, {X: 161.0, Y: 21.3}, {X: 161.0, Y: 22.3}, {X: 161.0, Y: 24.3}, {X: 161.0, Y: 25.3}, {X: 161.0, Y: 26.3}, {X: 161.0, Y: 27.3}, {X: 161.0, Y: 28.3}, {X: 161.0, Y: 29.3}, {X: 161.0, Y: 30.3}, {X: 161.0, Y: 31.3}, {X: 161.0, Y: 32.3}, {X: 161.0, Y: 33.3}, {X: 161.0, Y: 34.3}, {X: 161.0, Y: 35.3}, {X: 161.0, Y: 36.3}, {X: 161.0, Y: 37.3}, {X: 161.0, Y: 38.3}, {X: 162.0, Y: 38.3}, {X: 161.0, Y: 38.3}, {X: 161.0, Y: 39.3}, {X: 160.0, Y: 39.3}, {X: 159.0, Y: 39.3}, {X: 158.0, Y: 39.3}, {X: 157.0, Y: 39.3}, {X: 156.0, Y: 39.3}, {X: 155.0, Y: 39.3}, {X: 153.0, Y: 39.3}, {X: 152.0, Y: 40.3}, {X: 151.0, Y: 40.3},
	}
	tu.Assert(t, len(bracket.segment()) == 3)

	Sigma := Shape{
		{X: 107.0, Y: 90.3}, {X: 105.0, Y: 90.3}, {X: 104.0, Y: 91.3}, {X: 102.0, Y: 91.3}, {X: 99.0, Y: 91.3}, {X: 96.0, Y: 92.3}, {X: 93.0, Y: 92.3}, {X: 90.0, Y: 93.3}, {X: 86.0, Y: 93.3}, {X: 82.0, Y: 94.3}, {X: 78.0, Y: 94.3}, {X: 74.0, Y: 95.3}, {X: 70.0, Y: 95.3}, {X: 66.0, Y: 96.3}, {X: 63.0, Y: 96.3}, {X: 60.0, Y: 97.3}, {X: 58.0, Y: 97.3}, {X: 56.0, Y: 97.3}, {X: 55.0, Y: 97.3}, {X: 54.0, Y: 97.3}, {X: 53.0, Y: 97.3}, {X: 53.0, Y: 98.3}, {X: 54.0, Y: 99.3}, {X: 55.0, Y: 100.3}, {X: 57.0, Y: 101.3}, {X: 59.0, Y: 103.3}, {X: 61.0, Y: 104.3}, {X: 63.0, Y: 105.3}, {X: 65.0, Y: 107.3}, {X: 68.0, Y: 109.3}, {X: 71.0, Y: 111.3}, {X: 74.0, Y: 112.3}, {X: 77.0, Y: 114.3}, {X: 80.0, Y: 116.3}, {X: 82.0, Y: 117.3}, {X: 85.0, Y: 119.3}, {X: 87.0, Y: 120.3}, {X: 89.0, Y: 121.3}, {X: 90.0, Y: 122.3}, {X: 92.0, Y: 123.3}, {X: 93.0, Y: 124.3}, {X: 93.0, Y: 125.3}, {X: 94.0, Y: 125.3}, {X: 94.0, Y: 126.3}, {X: 95.0, Y: 126.3}, {X: 94.0, Y: 126.3}, {X: 94.0, Y: 127.3}, {X: 93.0, Y: 128.3}, {X: 92.0, Y: 129.3}, {X: 91.0, Y: 130.3}, {X: 90.0, Y: 132.3}, {X: 89.0, Y: 133.3}, {X: 88.0, Y: 135.3}, {X: 86.0, Y: 138.3}, {X: 84.0, Y: 140.3}, {X: 82.0, Y: 143.3}, {X: 80.0, Y: 146.3}, {X: 78.0, Y: 149.3}, {X: 75.0, Y: 152.3}, {X: 73.0, Y: 154.3}, {X: 72.0, Y: 156.3}, {X: 70.0, Y: 158.3}, {X: 69.0, Y: 159.3}, {X: 68.0, Y: 160.3}, {X: 68.0, Y: 161.3}, {X: 67.0, Y: 162.3}, {X: 68.0, Y: 162.3}, {X: 69.0, Y: 162.3}, {X: 71.0, Y: 162.3}, {X: 73.0, Y: 162.3}, {X: 76.0, Y: 162.3}, {X: 80.0, Y: 162.3}, {X: 84.0, Y: 162.3}, {X: 88.0, Y: 162.3}, {X: 93.0, Y: 161.3}, {X: 98.0, Y: 161.3}, {X: 104.0, Y: 160.3}, {X: 108.0, Y: 159.3}, {X: 112.0, Y: 159.3}, {X: 115.0, Y: 158.3}, {X: 118.0, Y: 158.3}, {X: 121.0, Y: 157.3}, {X: 123.0, Y: 156.3}, {X: 125.0, Y: 156.3}, {X: 126.0, Y: 156.3}, {X: 127.0, Y: 155.3}, {X: 127.0, Y: 156.3}, {X: 126.0, Y: 157.3},
	}
	tu.Assert(t, len(Sigma.segment()) == 4)

	S := Shape{
		{X: 113.0, Y: 4.3}, {X: 112.0, Y: 4.3}, {X: 111.0, Y: 4.3}, {X: 110.0, Y: 4.3}, {X: 109.0, Y: 5.3}, {X: 108.0, Y: 5.3}, {X: 107.0, Y: 5.3}, {X: 106.0, Y: 6.3}, {X: 105.0, Y: 7.3}, {X: 104.0, Y: 8.3}, {X: 103.0, Y: 9.3}, {X: 103.0, Y: 10.3}, {X: 102.0, Y: 11.3}, {X: 102.0, Y: 12.3}, {X: 102.0, Y: 13.3}, {X: 101.0, Y: 14.3}, {X: 101.0, Y: 15.3}, {X: 101.0, Y: 16.3}, {X: 102.0, Y: 16.3}, {X: 103.0, Y: 17.3}, {X: 104.0, Y: 17.3}, {X: 105.0, Y: 17.3}, {X: 106.0, Y: 17.3}, {X: 107.0, Y: 17.3}, {X: 108.0, Y: 17.3}, {X: 109.0, Y: 17.3}, {X: 110.0, Y: 17.3}, {X: 111.0, Y: 17.3}, {X: 112.0, Y: 17.3}, {X: 113.0, Y: 17.3}, {X: 114.0, Y: 17.3}, {X: 115.0, Y: 17.3}, {X: 116.0, Y: 18.3}, {X: 117.0, Y: 18.3}, {X: 117.0, Y: 19.3}, {X: 117.0, Y: 20.3}, {X: 117.0, Y: 21.3}, {X: 117.0, Y: 22.3}, {X: 117.0, Y: 23.3}, {X: 116.0, Y: 24.3}, {X: 115.0, Y: 24.3}, {X: 115.0, Y: 25.3}, {X: 114.0, Y: 25.3}, {X: 113.0, Y: 26.3}, {X: 112.0, Y: 26.3}, {X: 111.0, Y: 26.3}, {X: 110.0, Y: 27.3}, {X: 108.0, Y: 27.3}, {X: 107.0, Y: 27.3}, {X: 106.0, Y: 27.3}, {X: 105.0, Y: 27.3}, {X: 104.0, Y: 27.3}, {X: 103.0, Y: 27.3},
	}
	tu.Assert(t, len(S.segment()) == 1)

	S_other := Shape{
		{X: 115.0, Y: 4.3}, {X: 115.0, Y: 3.3}, {X: 114.0, Y: 3.3}, {X: 113.0, Y: 2.3}, {X: 112.0, Y: 2.3}, {X: 110.0, Y: 3.3}, {X: 109.0, Y: 3.3}, {X: 107.0, Y: 4.3}, {X: 106.0, Y: 6.3}, {X: 105.0, Y: 7.3}, {X: 103.0, Y: 8.3}, {X: 102.0, Y: 10.3}, {X: 102.0, Y: 11.3}, {X: 102.0, Y: 12.3}, {X: 101.0, Y: 14.3}, {X: 102.0, Y: 15.3}, {X: 103.0, Y: 16.3}, {X: 103.0, Y: 17.3}, {X: 104.0, Y: 17.3}, {X: 105.0, Y: 17.3}, {X: 106.0, Y: 17.3}, {X: 108.0, Y: 18.3}, {X: 109.0, Y: 18.3}, {X: 110.0, Y: 18.3}, {X: 112.0, Y: 18.3}, {X: 113.0, Y: 19.3}, {X: 114.0, Y: 19.3}, {X: 115.0, Y: 20.3}, {X: 115.0, Y: 21.3}, {X: 116.0, Y: 21.3}, {X: 116.0, Y: 22.3}, {X: 116.0, Y: 23.3}, {X: 115.0, Y: 24.3}, {X: 114.0, Y: 25.3}, {X: 113.0, Y: 27.3}, {X: 112.0, Y: 28.3}, {X: 110.0, Y: 28.3}, {X: 109.0, Y: 29.3}, {X: 108.0, Y: 29.3}, {X: 107.0, Y: 29.3}, {X: 106.0, Y: 29.3}, {X: 105.0, Y: 29.3}, {X: 104.0, Y: 28.3}, {X: 103.0, Y: 28.3}, {X: 102.0, Y: 27.3},
	}
	tu.Assert(t, len(S_other.segment()) == 1)

	b := Shape{
		{X: 82.0, Y: 126.3}, {X: 82.0, Y: 125.3}, {X: 82.0, Y: 124.3}, {X: 82.0, Y: 125.3}, {X: 82.0, Y: 126.3}, {X: 82.0, Y: 128.3}, {X: 82.0, Y: 130.3}, {X: 82.0, Y: 134.3}, {X: 83.0, Y: 139.3}, {X: 83.0, Y: 143.3}, {X: 83.0, Y: 148.3}, {X: 84.0, Y: 152.3}, {X: 84.0, Y: 155.3}, {X: 84.0, Y: 159.3}, {X: 85.0, Y: 163.3}, {X: 85.0, Y: 166.3}, {X: 85.0, Y: 169.3}, {X: 85.0, Y: 171.3}, {X: 85.0, Y: 173.3}, {X: 86.0, Y: 175.3}, {X: 86.0, Y: 176.3}, {X: 86.0, Y: 177.3}, {X: 86.0, Y: 176.3}, {X: 86.0, Y: 175.3}, {X: 86.0, Y: 174.3}, {X: 87.0, Y: 173.3}, {X: 88.0, Y: 171.3}, {X: 89.0, Y: 170.3}, {X: 90.0, Y: 169.3}, {X: 92.0, Y: 168.3}, {X: 93.0, Y: 167.3}, {X: 95.0, Y: 167.3}, {X: 97.0, Y: 167.3}, {X: 100.0, Y: 166.3}, {X: 102.0, Y: 166.3}, {X: 104.0, Y: 167.3}, {X: 106.0, Y: 167.3}, {X: 108.0, Y: 168.3}, {X: 109.0, Y: 170.3}, {X: 110.0, Y: 171.3}, {X: 110.0, Y: 173.3}, {X: 110.0, Y: 174.3}, {X: 109.0, Y: 176.3}, {X: 108.0, Y: 178.3}, {X: 107.0, Y: 179.3}, {X: 105.0, Y: 180.3}, {X: 103.0, Y: 181.3}, {X: 101.0, Y: 182.3}, {X: 99.0, Y: 182.3}, {X: 97.0, Y: 183.3}, {X: 95.0, Y: 182.3}, {X: 94.0, Y: 182.3}, {X: 92.0, Y: 181.3}, {X: 91.0, Y: 180.3}, {X: 90.0, Y: 179.3}, {X: 89.0, Y: 178.3}, {X: 88.0, Y: 177.3}, {X: 88.0, Y: 176.3}, {X: 88.0, Y: 174.3}, {X: 88.0, Y: 173.3}, {X: 88.0, Y: 172.3}, {X: 88.0, Y: 171.3},
	}
	tu.Assert(t, len(b.segment()) == 2)

	L := Shape{
		{X: 74.0, Y: 13.3}, {X: 74.0, Y: 14.3}, {X: 74.0, Y: 15.3}, {X: 74.0, Y: 16.3}, {X: 74.0, Y: 17.3}, {X: 75.0, Y: 18.3}, {X: 75.0, Y: 19.3}, {X: 75.0, Y: 20.3}, {X: 75.0, Y: 21.3}, {X: 75.0, Y: 22.3}, {X: 75.0, Y: 24.3}, {X: 75.0, Y: 25.3}, {X: 75.0, Y: 26.3}, {X: 75.0, Y: 27.3}, {X: 75.0, Y: 28.3}, {X: 75.0, Y: 29.3}, {X: 75.0, Y: 30.3}, {X: 75.0, Y: 31.3}, {X: 75.0, Y: 32.3}, {X: 75.0, Y: 33.3}, {X: 75.0, Y: 34.3}, {X: 75.0, Y: 35.3}, {X: 75.0, Y: 36.3}, {X: 75.0, Y: 37.3}, {X: 75.0, Y: 38.3}, {X: 75.0, Y: 39.3}, {X: 76.0, Y: 39.3}, {X: 77.0, Y: 39.3}, {X: 78.0, Y: 39.3}, {X: 79.0, Y: 39.3}, {X: 80.0, Y: 39.3}, {X: 81.0, Y: 39.3}, {X: 82.0, Y: 39.3}, {X: 83.0, Y: 39.3}, {X: 84.0, Y: 39.3}, {X: 85.0, Y: 39.3}, {X: 86.0, Y: 39.3}, {X: 87.0, Y: 39.3}, {X: 88.0, Y: 39.3}, {X: 89.0, Y: 39.3}, {X: 90.0, Y: 39.3}, {X: 91.0, Y: 39.3}, {X: 92.0, Y: 39.3}, {X: 92.0, Y: 38.3}, {X: 93.0, Y: 38.3}, {X: 94.0, Y: 38.3}, {X: 93.0, Y: 40.3},
	}
	tu.AssertEqual(t, len(L.segment()), 2)
}

func Test_outliers(t *testing.T) {
	tests := []struct {
		distances []fl
		want      []int
	}{
		{
			[]fl{1.5, 1.8, 1.8, 1.5, 1.8, 1.5, 1.8, 1, 1.8, 1, 2, 1.5, 1.5}, []int{},
		},
		{
			[]fl{138.04643, 2.9375868, 2.3468723, 1.8687651, 1.503265, 1.2503722, 1.1100935, 0.08732049, 0.007858951, 0.39740932, 0.5710598, 0.8708868, 2.056978, 1.1337994, 4.088291, 5.725977, 8.076624, 4.8938437, 7.4049892, 9.533691, 597.22107, 1078.5088},
			[]int{0, 20, 21},
		},
		{
			[]fl{9.210872, 10.105547, 0.44385967, 0.16874345, 0.072988644, 0.15659638, 0.41956666, 6.7205124, 8.150063, 13.877753},
			[]int{0, 1, 7, 8, 9},
		},
		{
			[]fl{5.6499586, 4.755519, 3.3502932, 2.4230149, 1.8411881, 2.8831248, 0.91425383, 1.0687108, 0.48590267, 0.4641099, 0.2364188, 0.55604833, 0.3145999, 1.9658515, 0.87147135, 1.5262066, 4.0515013, 4.6207294, 5.291796, 30.92837},
			[]int{19},
		},
		{
			[]fl{207.65044, 39.862995, 5.353853, 5.8616266, 2.6552966, 2.0492072, 1.5479609, 1.9022454, 2.487729, 0.41206878, 0.21967225, 0.13213828, 0.22268575, 0.41541922, 0.45333856, 0.8018612, 1.3756955, 1.9630847, 6.1017246, 18.975973, 20.212673, 79.53378, 6.266099},
			[]int{0, 1, 2, 3, 18, 19, 20, 21, 22},
		},
	}
	for _, tt := range tests {
		got := outliers(tt.distances)
		sort.Ints(got) // the order does not matter
		if !reflect.DeepEqual(got, tt.want) {
			t.Errorf("outliers() = %v, want %v", got, tt.want)
		}
	}
}

func TestSegmentb(t *testing.T) {
	b_bis := symbols_b[0].Union()
	tu.AssertEqual(t, len(b_bis.segment()), 3)

	b := Shape{
		{X: 21.0, Y: 10.3}, {X: 22.0, Y: 13.3}, {X: 22.0, Y: 15.3}, {X: 23.0, Y: 18.3}, {X: 23.0, Y: 20.3}, {X: 24.0, Y: 22.3}, {X: 24.0, Y: 23.3}, {X: 24.0, Y: 24.3}, {X: 25.0, Y: 25.3}, {X: 25.0, Y: 24.3}, {X: 25.0, Y: 23.3}, {X: 25.0, Y: 22.3}, {X: 25.0, Y: 21.3}, {X: 25.0, Y: 19.3}, {X: 25.0, Y: 18.3}, {X: 25.0, Y: 17.3}, {X: 26.0, Y: 17.3}, {X: 27.0, Y: 18.3}, {X: 29.0, Y: 19.3}, {X: 30.0, Y: 20.3}, {X: 30.0, Y: 21.3}, {X: 31.0, Y: 22.3}, {X: 31.0, Y: 24.3}, {X: 31.0, Y: 25.3}, {X: 30.0, Y: 27.3}, {X: 29.0, Y: 28.3}, {X: 28.0, Y: 29.3}, {X: 27.0, Y: 30.3}, {X: 26.0, Y: 30.3}, {X: 25.0, Y: 31.3}, {X: 24.0, Y: 31.3}, {X: 23.0, Y: 31.3}, {X: 22.0, Y: 31.3}, {X: 21.0, Y: 30.3}, {X: 20.0, Y: 30.3}, {X: 20.0, Y: 29.3}, {X: 19.0, Y: 29.3}, {X: 19.0, Y: 28.3}, {X: 18.0, Y: 27.3},
	}
	tu.AssertEqual(t, len(b.segment()), 3)
}
