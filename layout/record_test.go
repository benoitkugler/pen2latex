package layout

import (
	"reflect"
	"testing"

	sy "github.com/benoitkugler/pen2latex/symbols"
	tu "github.com/benoitkugler/pen2latex/testutils"
)

func Test_closestPointDistance(t *testing.T) {
	tests := []struct {
		u    sy.Shape
		v    sy.Shape
		want Fl
	}{
		{
			sy.Shape{{0, 10}, {0, 20}, {0, 30}}, sy.Shape{{0, 11}}, 1,
		},
		{
			sy.Shape{{0, 10}, {0, 20}, {0, 30}}, sy.Shape{{0, 12}, {0, 21}}, 1,
		},
	}
	for _, tt := range tests {
		if got := closestPointDistance(tt.u, tt.v); !reflect.DeepEqual(got, tt.want) {
			t.Errorf("closestPointDistance() = %v, want %v", got, tt.want)
		}
	}
}

func TestInferCompound(t *testing.T) {
	recF := Record{
		{{X: 69.0, Y: 102.3}, {X: 69.0, Y: 103.3}, {X: 69.0, Y: 104.3}, {X: 69.0, Y: 106.3}, {X: 70.0, Y: 108.3}, {X: 70.0, Y: 110.3}, {X: 70.0, Y: 113.3}, {X: 70.0, Y: 117.3}, {X: 71.0, Y: 121.3}, {X: 71.0, Y: 126.3}, {X: 71.0, Y: 132.3}, {X: 72.0, Y: 137.3}, {X: 72.0, Y: 142.3}, {X: 72.0, Y: 145.3}, {X: 72.0, Y: 147.3}, {X: 72.0, Y: 150.3}, {X: 72.0, Y: 153.3}, {X: 72.0, Y: 156.3}, {X: 71.0, Y: 159.3}, {X: 71.0, Y: 162.3}, {X: 71.0, Y: 165.3}, {X: 71.0, Y: 167.3}, {X: 71.0, Y: 169.3}, {X: 70.0, Y: 171.3}, {X: 70.0, Y: 172.3}, {X: 70.0, Y: 173.3}, {X: 70.0, Y: 172.3}, {X: 70.0, Y: 171.3}},
		{{X: 72.0, Y: 102.3}, {X: 73.0, Y: 102.3}, {X: 75.0, Y: 102.3}, {X: 77.0, Y: 101.3}, {X: 80.0, Y: 101.3}, {X: 82.0, Y: 101.3}, {X: 85.0, Y: 100.3}, {X: 88.0, Y: 99.3}, {X: 91.0, Y: 98.3}, {X: 94.0, Y: 97.3}, {X: 97.0, Y: 96.3}, {X: 100.0, Y: 95.3}, {X: 102.0, Y: 94.3}, {X: 104.0, Y: 93.3}, {X: 106.0, Y: 93.3}, {X: 107.0, Y: 92.3}, {X: 108.0, Y: 92.3}, {X: 107.0, Y: 93.3}},
		{{X: 74.0, Y: 134.3}, {X: 75.0, Y: 134.3}, {X: 76.0, Y: 134.3}, {X: 78.0, Y: 134.3}, {X: 80.0, Y: 134.3}, {X: 83.0, Y: 134.3}, {X: 85.0, Y: 134.3}, {X: 88.0, Y: 133.3}, {X: 90.0, Y: 133.3}, {X: 92.0, Y: 133.3}, {X: 94.0, Y: 132.3}, {X: 95.0, Y: 132.3}, {X: 96.0, Y: 132.3}, {X: 97.0, Y: 132.3}, {X: 98.0, Y: 132.3}, {X: 99.0, Y: 132.3}, {X: 100.0, Y: 131.3}, {X: 101.0, Y: 131.3}},
	}
	_, isSep := recF.isSeparated()
	tu.AssertEqual(t, isSep, false)

	recLa := Record{
		{{X: 97.0, Y: 77.3}, {X: 97.0, Y: 78.3}, {X: 96.0, Y: 79.3}, {X: 96.0, Y: 81.3}, {X: 95.0, Y: 84.3}, {X: 95.0, Y: 88.3}, {X: 93.0, Y: 93.3}, {X: 92.0, Y: 100.3}, {X: 90.0, Y: 106.3}, {X: 88.0, Y: 113.3}, {X: 85.0, Y: 118.3}, {X: 83.0, Y: 123.3}, {X: 80.0, Y: 127.3}, {X: 78.0, Y: 130.3}, {X: 77.0, Y: 133.3}, {X: 76.0, Y: 135.3}, {X: 74.0, Y: 136.3}, {X: 73.0, Y: 138.3}, {X: 73.0, Y: 140.3}, {X: 72.0, Y: 141.3}, {X: 73.0, Y: 141.3}, {X: 74.0, Y: 142.3}, {X: 76.0, Y: 142.3}, {X: 78.0, Y: 142.3}, {X: 81.0, Y: 143.3}, {X: 84.0, Y: 142.3}, {X: 87.0, Y: 142.3}, {X: 91.0, Y: 141.3}, {X: 93.0, Y: 141.3}, {X: 96.0, Y: 140.3}, {X: 97.0, Y: 140.3}, {X: 99.0, Y: 140.3}},
		{{X: 138.0, Y: 118.3}, {X: 137.0, Y: 118.3}, {X: 136.0, Y: 118.3}, {X: 135.0, Y: 118.3}, {X: 134.0, Y: 118.3}, {X: 133.0, Y: 119.3}, {X: 132.0, Y: 120.3}, {X: 131.0, Y: 121.3}, {X: 131.0, Y: 122.3}, {X: 130.0, Y: 123.3}, {X: 130.0, Y: 124.3}, {X: 130.0, Y: 126.3}, {X: 130.0, Y: 127.3}, {X: 130.0, Y: 129.3}, {X: 130.0, Y: 130.3}, {X: 131.0, Y: 132.3}, {X: 132.0, Y: 133.3}, {X: 133.0, Y: 134.3}, {X: 135.0, Y: 135.3}, {X: 136.0, Y: 135.3}, {X: 138.0, Y: 135.3}, {X: 139.0, Y: 134.3}, {X: 140.0, Y: 133.3}, {X: 141.0, Y: 131.3}, {X: 142.0, Y: 129.3}, {X: 143.0, Y: 127.3}, {X: 143.0, Y: 124.3}, {X: 143.0, Y: 123.3}, {X: 143.0, Y: 121.3}, {X: 143.0, Y: 120.3}, {X: 143.0, Y: 119.3}, {X: 143.0, Y: 118.3}, {X: 143.0, Y: 119.3}, {X: 143.0, Y: 120.3}, {X: 143.0, Y: 122.3}, {X: 143.0, Y: 124.3}, {X: 144.0, Y: 127.3}, {X: 145.0, Y: 130.3}, {X: 146.0, Y: 132.3}, {X: 147.0, Y: 135.3}, {X: 148.0, Y: 137.3}, {X: 148.0, Y: 138.3}, {X: 149.0, Y: 140.3}, {X: 150.0, Y: 141.3}, {X: 150.0, Y: 142.3}},
	}
	_, isSep = recLa.isSeparated()
	tu.AssertEqual(t, isSep, true)

	recx := Record{
		{{X: 57.0, Y: 156.3}, {X: 58.0, Y: 155.3}, {X: 59.0, Y: 155.3}, {X: 61.0, Y: 155.3}, {X: 62.0, Y: 156.3}, {X: 64.0, Y: 156.3}, {X: 65.0, Y: 157.3}, {X: 66.0, Y: 159.3}, {X: 67.0, Y: 160.3}, {X: 68.0, Y: 162.3}, {X: 68.0, Y: 164.3}, {X: 68.0, Y: 167.3}, {X: 68.0, Y: 169.3}, {X: 67.0, Y: 171.3}, {X: 66.0, Y: 173.3}, {X: 65.0, Y: 175.3}, {X: 63.0, Y: 176.3}, {X: 62.0, Y: 176.3}, {X: 61.0, Y: 177.3}, {X: 59.0, Y: 177.3}, {X: 58.0, Y: 177.3}, {X: 56.0, Y: 176.3}, {X: 55.0, Y: 176.3}, {X: 54.0, Y: 175.3}, {X: 53.0, Y: 174.3}, {X: 52.0, Y: 174.3}, {X: 51.0, Y: 173.3}, {X: 51.0, Y: 172.3}, {X: 52.0, Y: 172.3}},
		{{X: 80.0, Y: 157.3}, {X: 80.0, Y: 156.3}, {X: 79.0, Y: 156.3}, {X: 78.0, Y: 156.3}, {X: 77.0, Y: 156.3}, {X: 76.0, Y: 156.3}, {X: 75.0, Y: 156.3}, {X: 75.0, Y: 157.3}, {X: 74.0, Y: 158.3}, {X: 73.0, Y: 159.3}, {X: 72.0, Y: 160.3}, {X: 72.0, Y: 161.3}, {X: 71.0, Y: 163.3}, {X: 71.0, Y: 165.3}, {X: 71.0, Y: 167.3}, {X: 71.0, Y: 169.3}, {X: 72.0, Y: 170.3}, {X: 73.0, Y: 172.3}, {X: 74.0, Y: 173.3}, {X: 76.0, Y: 174.3}, {X: 77.0, Y: 175.3}, {X: 79.0, Y: 175.3}, {X: 81.0, Y: 175.3}, {X: 83.0, Y: 175.3}, {X: 85.0, Y: 175.3}, {X: 87.0, Y: 175.3}, {X: 88.0, Y: 174.3}},
	}
	_, isSep = recx.isSeparated()
	tu.AssertEqual(t, isSep, false)

	recFraction := Record{
		{{X: 72.0, Y: 86.3}, {X: 73.0, Y: 86.3}, {X: 74.0, Y: 86.3}, {X: 75.0, Y: 85.3}, {X: 76.0, Y: 84.3}, {X: 77.0, Y: 83.3}, {X: 78.0, Y: 82.3}, {X: 79.0, Y: 81.3}, {X: 79.0, Y: 79.3}, {X: 80.0, Y: 77.3}, {X: 81.0, Y: 75.3}, {X: 81.0, Y: 73.3}, {X: 82.0, Y: 71.3}, {X: 82.0, Y: 69.3}, {X: 83.0, Y: 68.3}, {X: 83.0, Y: 67.3}, {X: 83.0, Y: 66.3}, {X: 83.0, Y: 65.3}, {X: 83.0, Y: 66.3}, {X: 83.0, Y: 67.3}, {X: 84.0, Y: 69.3}, {X: 84.0, Y: 71.3}, {X: 84.0, Y: 74.3}, {X: 84.0, Y: 77.3}, {X: 84.0, Y: 79.3}, {X: 84.0, Y: 82.3}, {X: 85.0, Y: 84.3}, {X: 85.0, Y: 86.3}, {X: 84.0, Y: 87.3}, {X: 84.0, Y: 88.3}, {X: 84.0, Y: 89.3}, {X: 84.0, Y: 90.3}, {X: 83.0, Y: 90.3}},
		{{X: 78.0, Y: 104.3}, {X: 79.0, Y: 104.3}, {X: 81.0, Y: 104.3}, {X: 82.0, Y: 103.3}, {X: 83.0, Y: 103.3}, {X: 85.0, Y: 103.3}, {X: 87.0, Y: 102.3}, {X: 90.0, Y: 102.3}, {X: 92.0, Y: 101.3}, {X: 94.0, Y: 101.3}, {X: 95.0, Y: 100.3}, {X: 96.0, Y: 100.3}, {X: 97.0, Y: 100.3}},
		{{X: 80.0, Y: 118.3}, {X: 80.0, Y: 117.3}, {X: 81.0, Y: 116.3}, {X: 81.0, Y: 115.3}, {X: 81.0, Y: 114.3}, {X: 82.0, Y: 114.3}, {X: 83.0, Y: 113.3}, {X: 84.0, Y: 114.3}, {X: 85.0, Y: 115.3}, {X: 85.0, Y: 116.3}, {X: 86.0, Y: 119.3}, {X: 86.0, Y: 121.3}, {X: 86.0, Y: 124.3}, {X: 85.0, Y: 126.3}, {X: 85.0, Y: 128.3}, {X: 84.0, Y: 130.3}, {X: 83.0, Y: 131.3}, {X: 83.0, Y: 132.3}, {X: 82.0, Y: 133.3}, {X: 81.0, Y: 134.3}, {X: 80.0, Y: 134.3}, {X: 79.0, Y: 134.3}, {X: 78.0, Y: 134.3}, {X: 78.0, Y: 135.3}, {X: 79.0, Y: 135.3}, {X: 80.0, Y: 135.3}, {X: 82.0, Y: 136.3}, {X: 83.0, Y: 136.3}, {X: 85.0, Y: 137.3}, {X: 86.0, Y: 137.3}, {X: 88.0, Y: 137.3}, {X: 89.0, Y: 137.3}, {X: 90.0, Y: 137.3}, {X: 91.0, Y: 137.3}, {X: 91.0, Y: 136.3}, {X: 92.0, Y: 136.3}, {X: 93.0, Y: 135.3}, {X: 94.0, Y: 134.3}, {X: 95.0, Y: 133.3}, {X: 95.0, Y: 132.3}, {X: 95.0, Y: 131.3}},
	}
	_, isSep = recFraction.isSeparated()
	tu.AssertEqual(t, isSep, false)

	recPower := Record{
		{{X: 72.0, Y: 152.3}, {X: 72.0, Y: 151.3}, {X: 72.0, Y: 150.3}, {X: 71.0, Y: 150.3}, {X: 71.0, Y: 149.3}, {X: 71.0, Y: 148.3}, {X: 71.0, Y: 147.3}, {X: 71.0, Y: 146.3}, {X: 72.0, Y: 145.3}, {X: 73.0, Y: 144.3}, {X: 74.0, Y: 143.3}, {X: 75.0, Y: 143.3}, {X: 76.0, Y: 143.3}, {X: 77.0, Y: 143.3}, {X: 78.0, Y: 144.3}, {X: 79.0, Y: 145.3}, {X: 81.0, Y: 146.3}, {X: 82.0, Y: 148.3}, {X: 82.0, Y: 151.3}, {X: 83.0, Y: 153.3}, {X: 83.0, Y: 156.3}, {X: 82.0, Y: 158.3}, {X: 82.0, Y: 160.3}, {X: 81.0, Y: 162.3}, {X: 79.0, Y: 164.3}, {X: 78.0, Y: 166.3}, {X: 77.0, Y: 167.3}, {X: 76.0, Y: 167.3}, {X: 75.0, Y: 168.3}, {X: 73.0, Y: 168.3}, {X: 73.0, Y: 167.3}, {X: 72.0, Y: 167.3}, {X: 71.0, Y: 166.3}, {X: 70.0, Y: 165.3}, {X: 70.0, Y: 164.3}, {X: 70.0, Y: 163.3}, {X: 70.0, Y: 162.3}},
		{{X: 91.0, Y: 148.3}, {X: 90.0, Y: 148.3}, {X: 90.0, Y: 147.3}, {X: 89.0, Y: 147.3}, {X: 88.0, Y: 147.3}, {X: 87.0, Y: 147.3}, {X: 86.0, Y: 148.3}, {X: 85.0, Y: 148.3}, {X: 84.0, Y: 149.3}, {X: 83.0, Y: 151.3}, {X: 82.0, Y: 152.3}, {X: 82.0, Y: 154.3}, {X: 82.0, Y: 156.3}, {X: 82.0, Y: 158.3}, {X: 82.0, Y: 160.3}, {X: 82.0, Y: 162.3}, {X: 83.0, Y: 164.3}, {X: 84.0, Y: 166.3}, {X: 85.0, Y: 168.3}, {X: 86.0, Y: 170.3}, {X: 87.0, Y: 170.3}, {X: 89.0, Y: 171.3}, {X: 90.0, Y: 171.3}, {X: 92.0, Y: 171.3}, {X: 93.0, Y: 171.3}, {X: 95.0, Y: 170.3}, {X: 96.0, Y: 169.3}, {X: 97.0, Y: 168.3}},
		{{X: 96.0, Y: 122.3}, {X: 96.0, Y: 121.3}, {X: 97.0, Y: 120.3}, {X: 98.0, Y: 120.3}, {X: 98.0, Y: 119.3}, {X: 99.0, Y: 119.3}, {X: 99.0, Y: 121.3}, {X: 99.0, Y: 122.3}, {X: 99.0, Y: 124.3}, {X: 98.0, Y: 125.3}, {X: 98.0, Y: 127.3}, {X: 97.0, Y: 129.3}, {X: 96.0, Y: 130.3}, {X: 96.0, Y: 131.3}, {X: 95.0, Y: 132.3}, {X: 95.0, Y: 133.3}, {X: 94.0, Y: 133.3}, {X: 95.0, Y: 133.3}, {X: 96.0, Y: 133.3}, {X: 96.0, Y: 134.3}, {X: 98.0, Y: 134.3}, {X: 99.0, Y: 134.3}, {X: 100.0, Y: 134.3}, {X: 101.0, Y: 134.3}, {X: 102.0, Y: 134.3}, {X: 103.0, Y: 134.3}, {X: 104.0, Y: 134.3}},
	}
	_, isSep = recPower.isSeparated()
	tu.AssertEqual(t, isSep, false)
}

func Test_isMerged(t *testing.T) {
	// x)
	input := Record{
		{{X: 44.0, Y: 64.0}, {X: 44.0, Y: 64.0}, {X: 44.0, Y: 63.0}, {X: 44.0, Y: 63.0}, {X: 43.0, Y: 63.0}, {X: 43.0, Y: 62.0}, {X: 43.0, Y: 62.0}, {X: 43.0, Y: 62.0}, {X: 43.0, Y: 61.0}, {X: 43.0, Y: 61.0}, {X: 43.0, Y: 60.0}, {X: 44.0, Y: 60.0}, {X: 45.0, Y: 59.0}, {X: 47.0, Y: 59.0}, {X: 48.0, Y: 59.0}, {X: 49.0, Y: 59.0}, {X: 51.0, Y: 60.0}, {X: 52.0, Y: 62.0}, {X: 54.0, Y: 64.0}, {X: 54.0, Y: 67.0}, {X: 55.0, Y: 70.0}, {X: 55.0, Y: 72.0}, {X: 55.0, Y: 75.0}, {X: 54.0, Y: 77.0}, {X: 53.0, Y: 78.0}, {X: 51.0, Y: 80.0}, {X: 50.0, Y: 81.0}, {X: 48.0, Y: 82.0}, {X: 47.0, Y: 82.0}, {X: 46.0, Y: 83.0}, {X: 45.0, Y: 83.0}, {X: 44.0, Y: 83.0}, {X: 43.0, Y: 82.0}, {X: 43.0, Y: 82.0}, {X: 43.0, Y: 81.0}, {X: 43.0, Y: 80.0}},
		{{X: 62.0, Y: 59.0}, {X: 62.0, Y: 59.0}, {X: 62.0, Y: 59.0}, {X: 62.0, Y: 59.0}, {X: 62.0, Y: 59.0}, {X: 61.0, Y: 59.0}, {X: 61.0, Y: 58.0}, {X: 60.0, Y: 58.0}, {X: 60.0, Y: 58.0}, {X: 59.0, Y: 58.0}, {X: 58.0, Y: 58.0}, {X: 57.0, Y: 58.0}, {X: 56.0, Y: 59.0}, {X: 54.0, Y: 60.0}, {X: 53.0, Y: 62.0}, {X: 52.0, Y: 63.0}, {X: 52.0, Y: 65.0}, {X: 51.0, Y: 67.0}, {X: 51.0, Y: 70.0}, {X: 51.0, Y: 72.0}, {X: 52.0, Y: 74.0}, {X: 53.0, Y: 75.0}, {X: 54.0, Y: 77.0}, {X: 55.0, Y: 78.0}, {X: 57.0, Y: 79.0}, {X: 58.0, Y: 79.0}, {X: 60.0, Y: 80.0}, {X: 62.0, Y: 80.0}, {X: 64.0, Y: 80.0}, {X: 66.0, Y: 80.0}, {X: 67.0, Y: 79.0}, {X: 69.0, Y: 79.0}, {X: 69.0, Y: 77.0}},
		{{X: 63.0, Y: 43.0}, {X: 63.0, Y: 43.0}, {X: 63.0, Y: 43.0}, {X: 63.0, Y: 42.0}, {X: 63.0, Y: 42.0}, {X: 63.0, Y: 42.0}, {X: 63.0, Y: 42.0}, {X: 63.0, Y: 42.0}, {X: 63.0, Y: 42.0}, {X: 63.0, Y: 42.0}, {X: 63.0, Y: 43.0}, {X: 63.0, Y: 43.0}, {X: 63.0, Y: 44.0}, {X: 64.0, Y: 46.0}, {X: 65.0, Y: 47.0}, {X: 66.0, Y: 49.0}, {X: 67.0, Y: 52.0}, {X: 68.0, Y: 54.0}, {X: 68.0, Y: 57.0}, {X: 69.0, Y: 60.0}, {X: 69.0, Y: 64.0}, {X: 70.0, Y: 67.0}, {X: 70.0, Y: 70.0}, {X: 70.0, Y: 73.0}, {X: 70.0, Y: 76.0}, {X: 70.0, Y: 79.0}, {X: 70.0, Y: 81.0}, {X: 69.0, Y: 83.0}, {X: 68.0, Y: 85.0}, {X: 67.0, Y: 86.0}, {X: 67.0, Y: 87.0}, {X: 65.0, Y: 88.0}, {X: 65.0, Y: 89.0}, {X: 65.0, Y: 89.0}, {X: 64.0, Y: 89.0}, {X: 64.0, Y: 89.0}},
	}
	_, previous, last := input.footprints()
	tu.Assert(t, !isMerged(previous, last))
}
